# bottleneck_params.py

import numpy as np

env_array = np.ones((50,50))

#This is a parameters file generated by Geonomics
#(by the gnx.make_parameters_file() function).


                   ##  ::::::          :::    :: ::::::::::##
             ##:::::    ::::   :::      ::    :: :: ::::::::::: :##
          ##::::::::     ::            ::   ::::::::::::::::::::::::##
        ##:::::::::                      :::::::::: :::::: ::::::::  :##
      ## : ::::  ::                    ::::  : ::    :::::::: : ::  :   ##
     ##ggggg  eeeee ooooo   nn   nn   ooooo   mm   mm iiiiii  ccccc sssss##
    ##gg     ee    oo   oo  nnn  nn  oo   oo  mm   mm   ii   cc     ss    ##
    ##gg     eeee oo     oo nn n nn oo     oo mmm mmm   ii   cc     ssssss##
    ##gg ggg eeee oo     oo nn  nnn oo     oo mm m mm   ii   cc         ss##
    ##gg   g ee    oo   oo  nn   nn  oo   oo  mm   mm   ii   cc        sss##
     ##ggggg  eeeee ooooo   nn   nn   ooooo   mm   mm iiiiii  ccccc sssss##
      ##    :::::::::             :::::::::::: ::              ::  :   :##
        ##:   :::::                   ::::::: :::             ::::::: ##
          ##   :::                     ::::::  ::              :::::##
             ## ::                      ::::                     ##
                   ##                                      ##



params = {
#-----------------------------------------------------------------------------#

#-----------------#
#--- LANDSCAPE ---#
#-----------------#
    'landscape': {

    #------------#
    #--- main ---#
    #------------#
        'main': {
            #y,x (a.k.a. i,j) dimensions of the Landscape
            'dim':                      (50,50),
            #resolution of the Landscape
            'res':                      (1,1),
            #upper-left corner of the Landscape
            'ulc':                      (0,0),
            #projection of the Landscape
            'prj':                      None,
            }, # <END> 'main'

    #--------------#
    #--- layers ---#
    #--------------#
        'layers': {

            #layer name (LAYER NAMES MUST BE UNIQUE!)
            'layer_0': {

        #-------------------------------------#
        #--- layer num. 0: init parameters ---#
        #-------------------------------------#

                #initiating parameters for this layer
                'init': {

                    #parameters for a 'defined'-type Layer
                    'defined': {
                        #raster to use for the Layer
                        'rast':                   env_array,
                        #point coordinates
                        'pts':                    None,
                        #point values
                        'vals':                   None,
                        #interpolation method {None, 'linear', 'cubic',
                        #'nearest'}
                        'interp_method':          None,

                        }, # <END> 'defined'

                    }, # <END> 'init'

                }, # <END> layer num. 0



    #### NOTE: Individual Layers' sections can be copy-and-pasted (and
    #### assigned distinct keys and names), to create additional Layers.


            } # <END> 'layers'

        }, # <END> 'landscape'


#-----------------------------------------------------------------------------#

#-----------------#
#--- COMMUNITY ---#
#-----------------#
    'comm': {

        'species': {

            #species name (SPECIES NAMES MUST BE UNIQUE!)
            'spp_0': {

            #-----------------------------------#
            #--- spp num. 0: init parameters ---#
            #-----------------------------------#

                'init': {
                    #starting number of individs
                    'N':                500,
                    #carrying-capacity Layer name
                    'K_layer':          'layer_0',
                    #multiplicative factor for carrying-capacity layer
                    'K_factor':         35,
                    }, # <END> 'init'

            #-------------------------------------#
            #--- spp num. 0: mating parameters ---#
            #-------------------------------------#

                'mating'    : {
                    #age(s) at sexual maturity (if tuple, female first)
                    'repro_age':                0,
                    #whether to assign sexes
                    'sex':                      False,
                    #ratio of males to females
                    'sex_ratio':                1/1,
                    #whether P(birth) should be weighted by parental dist
                    'dist_weighted_birth':       False,
                    #intrinsic growth rate
                    'R':                        2,
                    #intrinsic birth rate (MUST BE 0<=b<=1)
                    'b':                        1,
                    #expectation of distr of n offspring per mating pair
                    'n_births_distr_lambda':    1,
                    #whether n births should be fixed at n_births_dist_lambda
                    'n_births_fixed':           True,
                    #radius of mate-search area
                    'mating_radius':            None,
                    'choose_nearest_mate':      False,
                    'inverse_dist_mating':      False,
                    }, # <END> 'mating'

            #----------------------------------------#
            #--- spp num. 0: mortality parameters ---#
            #----------------------------------------#

                'mortality'     : {
                    #maximum age
                    'max_age':                      1,
                    #min P(death) (MUST BE 0<=d_min<=1)
                    'd_min':                        0,
                    #max P(death) (MUST BE 0<=d_max<=1)
                    'd_max':                        1,
                    #width of window used to estimate local pop density
                    'density_grid_window_width':    None,
                    }, # <END> 'mortality'

            #---------------------------------------#
            #--- spp num. 0: movement parameters ---#
            #---------------------------------------#

                'movement': {
                    #whether or not the species is mobile
                    'move':                     True,
                    #mode of distr of movement direction
                    'direction_distr_mu':       1,
                    #concentration of distr of movement direction
                    'direction_distr_kappa':    0,
                    #mean of distr of movement distance
                    'movement_distance_distr_param1':        0.01,
                    #variance of distr of movement distance
                    'movement_distance_distr_param2':     0.5,
                    'movement_distance_distr':          'lognormal',
                    #mean of distr of dispersal distance
                    'dispersal_distance_distr_param1':       -1,
                    #variance of distr of dispersal distance
                    'dispersal_distance_distr_param2':    0.05,
                    'dispersal_distance_distr':         'lognormal',
                    },    # <END> 'movement'


            #---------------------------------------------------#
            #--- spp num. 0: genomic architecture parameters ---#
            #---------------------------------------------------#

                'gen_arch': {
                    #file defining custom genomic arch
                    'gen_arch_file':            None,
                    #num of loci
                    'L':                        500,
                    #num of chromosomes
                    'l_c':                      [500],
                    #whether starting allele frequencies should be fixed at 0.5
                    'start_p_fixed':            0.5,
                    'start_neut_zero':          False,
                    #genome-wide per-base neutral mut rate (0 to disable)
                    'mu_neut':                  0,
                    #genome-wide per-base deleterious mut rate (0 to disable)
                    'mu_delet':                 0,
                    #shape of distr of deleterious effect sizes
                    'delet_alpha_distr_shape':  0.2,
                    #scale of distr of deleterious effect sizes
                    'delet_alpha_distr_scale':  0.2,
                    #alpha of distr of recomb rates
                    'r_distr_alpha':            0.5,
                    #beta of distr of recomb rates
                    'r_distr_beta':             None,
                    #whether loci should be dominant (for allele '1')
                    'dom':                      False,
                    #whether to allow pleiotropy
                    'pleiotropy':               False,
                    #custom fn for drawing recomb rates
                    'recomb_rate_custom_fn':    None,
                    #number of recomb paths to hold in memory
                    'n_recomb_paths_mem':       int(1e5),
                    #total number of recomb paths to simulate
                    'n_recomb_paths_tot':       int(1e5),
                    'n_recomb_sims':            10_000,
                    'allow_ad_hoc_recomb':      False,
                    'jitter_breakpoints':       False,
                    #whether to save mutation logs
                    'mut_log':                  False,
                    #whether to use tskit (to record full spatial pedigree)
                    'use_tskit':                False,
                    #time step interval for simplification of tskit tables
                    'tskit_simp_interval':      100,

                    }, # <END> 'gen_arch'


            #-------------------------------------#
            #--- spp num. 0: change parameters ---#
            #-------------------------------------#

                'change': {

                    #-------------------------------#
                    # demographic change parameters #
                    #-------------------------------#
                    'dem': {

                        0: {
                            #kind of event {'monotonic', 'stochastic',
                            #'cyclical', 'custom'}
                            'kind':             'custom',
                            #starting timestep
                            'start_t':          None,
                            #ending timestep
                            'end_t':            None,
                            #rate, for monotonic change
                            'rate':             None,
                            #interval of changes, for stochastic change
                            'interval':         None,
                            #distr, for stochastic change {'uniform', 'normal'}
                            'distr':            None,
                            #num cycles, for cyclical change
                            'n_cycles':         None,
                            #min & max sizes, for stochastic & cyclical change
                            'size_range':       None,
                            #list of timesteps, for custom change
                            'timesteps':        [199, 249],
                            #list of sizes, for custom change
                            'sizes':            [0.3, 1],
                            }, # <END> event 0




    #### NOTE: Individual demographic change events' sections can be
    #### copy-and-pasted (and assigned distinct keys and names), to create
    #### additional events.


                        }, # <END> 'dem'

                        } # <END> 'change'

                }, # <END> spp num. 0



    #### NOTE: individual Species' sections can be copy-and-pasted (and
    #### assigned distinct keys and names), to create additional Species.


            }, # <END> 'species'

        }, # <END> 'comm'


#-----------------------------------------------------------------------------#

#-------------#
#--- MODEL ---#
#-------------#
    'model': {
        #total Model runtime (in timesteps)
        'T':            300,
        #min burn-in runtime (in timesteps)
        'burn_T':       30,
        #seed number
        'num':          None,

        #-----------------------------#
        #--- iterations parameters ---#
        #-----------------------------#
        'its': {
            #num iterations
            'n_its':            1,
            #whether to randomize Landscape each iteration
            'rand_landscape':   False,
            #whether to randomize Community each iteration
            'rand_comm':        False,
            #whether to burn in each iteration
            'repeat_burn':      False,
            }, # <END> 'iterations'


        #----------------------------------#
        #--- data-collection parameters ---#
        #----------------------------------#
        'data': {
            'sampling': {
                #sampling scheme {'all', 'random', 'point', 'transect'}
                'scheme':               'all',
                #sample size at each point, for point & transect sampling
                'n':                    250,
                #coords of collection points, for point sampling
                'points':               None,
                #coords of transect endpoints, for transect sampling
                'transect_endpoints':   None,
                #num points along transect, for transect sampling
                'n_transect_points':    None,
                #collection radius around points, for point & transect sampling
                'radius':               None,
                #when to collect data
                'when':                 5,
                #whether to save current Layers when data is collected
                'include_landscape':    False,
                #whether to include fixed loci in VCF files
                'include_fixed_sites':  True,
                },
            'format': {
                #format for genetic data {'vcf', 'fasta'}
                'gen_format':           ['vcf', 'fasta'],
                #format for vector geodata {'csv', 'shapefile', 'geojson'}
                'geo_vect_format':      'csv',
                #format for raster geodata {'geotiff', 'txt'}
                'geo_rast_format':      'geotiff',
                },
            }, #<END> 'data'


        } # <END> 'model'

    } # <END> params


